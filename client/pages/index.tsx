import Head from 'next/head';
import Layout from '@/components/Layout';
import PostForm from '@/components/PostForm';
import Post from '@/components/Post';
import { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
    selectPostsValue,
    setCurrentUserPosts,
    setPosts,
} from '@/store/slices/postsSlices';
import { GetServerSideProps } from 'next';
import {
    selectUserValue,
    setRefreshToken,
    setUser,
} from '@/store/slices/userSlice';
import {
    checkAccessToken,
    fetchAccessToken,
    findAllPosts,
    findUser,
    findUserById,
} from '@/lib/fetchCommand';
import { HomeProps } from '@/lib/interface';
import PostFormLayout from '@/components/PostFormLayout';

export const getServerSideProps: GetServerSideProps = async (context) => {
    const { req, res } = context;
    const refreshToken = req.cookies.refreshToken;

    if (!refreshToken) {
        return {
            redirect: {
                destination: '/login',
            },
            props: {},
        };
    }

    let accessToken;

    accessToken = await fetchAccessToken(refreshToken);
    const status = checkAccessToken(accessToken, context);
    if (status === false) {
        return {
            redirect: {
                destination: '/login',
            },
            props: {},
        };
    }

    let posts;

    posts = await findAllPosts(accessToken!);

    if (posts === undefined) {
        posts = [];
    } else {
        posts = JSON.parse(JSON.stringify(posts));
    }

    const userId = req.cookies.userId!;

    let user;

    user = await findUserById(userId, accessToken!);

    if (user === undefined) {
        user = {};
    } else {
        user = JSON.parse(JSON.stringify(user));
    }

    let users;
    users = await findUser(accessToken!);

    if (users === undefined) {
        users = [];
    } else {
        users = JSON.parse(JSON.stringify(users));
    }

    return {
        props: {
            posts: posts,
            userProps: user,
            refreshToken: refreshToken,
            users: users,
        },
    };
};

export default function Home({
    posts,
    userProps,
    refreshToken,
    users,
}: HomeProps) {
    const allPosts = useSelector(selectPostsValue);
    const dispatch = useDispatch();
    const user = useSelector(selectUserValue);

    useEffect(() => {
        dispatch(setPosts(posts));
        dispatch(setUser(userProps));
        dispatch(setRefreshToken(refreshToken));
        dispatch(setCurrentUserPosts(userProps.posts));
    }, []);

    return (
        <>
            <Head>
                <title>Ristek MedSOS</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Layout
                profilePicture={
                    user?.profilePicture || userProps?.profilePicture
                }
                refreshToken={refreshToken}
                users={users}
            >
                <h1 className="2xl:text-5xl lg:text-4xl md:text-2xl text-3xl font-bold">
                    Welcome back,{' '}
                    <span className="text-primary">@{userProps?.fullName}</span>
                </h1>
                <PostFormLayout
                    allPosts={allPosts}
                    refreshToken={refreshToken}
                    userProps={userProps}
                >
                    {allPosts.map((post) => {
                        return (
                            <Post
                                key={post.id}
                                idPost={post.id}
                                content={post.content}
                                image={post.image}
                                createdAt={post.createdAt}
                                createdBy={
                                    user?.id === post.user.id
                                        ? user || userProps
                                        : post.user
                                }
                                isCloseFriend={post.isCloseFriend}
                                Bookmarks={post.Bookmarks}
                                currentUser={userProps}
                            />
                        );
                    })}
                </PostFormLayout>
            </Layout>
        </>
    );
}
